/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package menu.highscoresmenu;

import controllers.IAmTheAntivirus;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
import menu.AbstractMenuViewController;
import models.GameStatus;

/**
 *
 * @author manud
 */
public class SetHighScoresMenuViewController extends AbstractMenuViewController {

    /**
     * Creates new form SetHighScoresMenuViewController
     */
    
    private static final String HIGHSCORES_FILE_PATH = "src/resources/highscores/highscores.txt";
    
    public SetHighScoresMenuViewController(Dimension dimension) {
        super(dimension);
        initComponents();
        EventQueue.invokeLater(() -> {
            scoreLabel.setText(Integer.toString(GameStatus.getInstance().getScore()));
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        confirmButton = new menu.RetroButton();
        scoreLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 0, 0));

        jLabel1.setFont(new java.awt.Font("Minecraft", java.awt.Font.BOLD, 45));
        jLabel1.setForeground(java.awt.Color.orange);
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Insert Your Name");

        nameField.setBackground(new java.awt.Color(0, 0, 0));
        nameField.setFont(new java.awt.Font("Minecraft", java.awt.Font.BOLD, 60)
        );
        nameField.setForeground(new java.awt.Color(255, 255, 255));
        nameField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        nameField.setBorder(null);
        nameField.setName(""); // NOI18N

        confirmButton.setText("OK");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        scoreLabel.setBackground(new java.awt.Color(0, 0, 0));
        scoreLabel.setFont(new java.awt.Font("Minecraft", java.awt.Font.BOLD, 45));
        scoreLabel.setForeground(new java.awt.Color(255, 255, 255));
        scoreLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scoreLabel.setText("SCORE");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nameField)
                .addContainerGap())
            .addComponent(scoreLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(scoreLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74)
                .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {nameField, scoreLabel});

    }// </editor-fold>//GEN-END:initComponents

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        EventQueue.invokeLater(() -> {
            saveHighScoresOnFile();
            IAmTheAntivirus.getGameInstance().closeSetHighScoresMenu();
        });
    }//GEN-LAST:event_confirmButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private menu.RetroButton confirmButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel scoreLabel;
    // End of variables declaration//GEN-END:variables

    private void saveHighScoresOnFile() {
        
        int i = 0;
        boolean replaced = false;
        
        while(i < 5 && !replaced){
            GameStatus status = GameStatus.getInstance();
            if (Integer.parseInt(status.getHighscores().get(i).split(";")[1]) < status.getScore()){
                status.getHighscores().add(i,nameField.getText() + ";" + scoreLabel.getText());
                status.getHighscores().remove(5);
                replaced = true;
            }else{
                i++;
            }
        }
        try {
                BufferedWriter out = new BufferedWriter(new FileWriter(HIGHSCORES_FILE_PATH));
                for(int j = 0; j < 5; j++){
                    out.write(GameStatus.getInstance().getHighscores().get(j).split(";")[0] + " " + GameStatus.getInstance().getHighscores().get(j).split(";")[1] + "\n");
                }
                out.close();
            }
        catch (IOException ex) {
                Logger.getLogger(SetHighScoresMenuViewController.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
}
